
(function($){
  _this = this
  var _nodes = []
  _this.nodes = _nodes

  var Renderer = function(canvas){
    var canvas = $(canvas).get(0)
    var ctx = canvas.getContext("2d");
    var particleSystem

    var that = {
      init:function(system){
        //
        // the particle system will call the init function once, right before the
        // first frame is to be drawn. it's a good place to set up the canvas and
        // to pass the canvas size to the particle system
        //
        // save a reference to the particle system for use in the .redraw() loop
        particleSystem = system

        // inform the system of the screen dimensions so it can map coords for us.
        // if the canvas is ever resized, screenSize should be called again with
        // the new dimensions
        particleSystem.screenSize(canvas.width, canvas.height) 
        particleSystem.screenPadding(80) // leave an extra 80px of whitespace per side
        
        // set up some event handlers to allow for node-dragging
        that.initMouseHandling()
      },
      
      redraw:function(){
        // 
        // redraw will be called repeatedly during the run whenever the node positions
        // change. the new positions for the nodes can be accessed by looking at the
        // .p attribute of a given node. however the p.x & p.y values are in the coordinates
        // of the particle system rather than the screen. you can either map them to
        // the screen yourself, or use the convenience iterators .eachNode (and .eachEdge)
        // which allow you to step through the actual node objects but also pass an
        // x,y point in the screen's coordinate system
        // 
        ctx.fillStyle = "white"
        ctx.fillRect(0,0, canvas.width, canvas.height)
        
        particleSystem.eachEdge(function(edge, pt1, pt2){
          // edge: {source:Node, target:Node, length:#, data:{}}
          // pt1:  {x:#, y:#}  source position in screen coords
          // pt2:  {x:#, y:#}  target position in screen coords
          
		  // draw a line from pt1 to pt2
          ctx.strokeStyle = "rgba(0,0,0, .333)"
          ctx.lineWidth = 1
          ctx.beginPath()
          ctx.moveTo(pt1.x, pt1.y)
          ctx.lineTo(pt2.x, pt2.y)
          ctx.stroke()
		         
        })

        particleSystem.eachNode(function(node, pt){
          // node: {mass:#, p:{x,y}, name:"", data:{}}
          // pt:   {x:#, y:#}  node position in screen coords

          // draw a circle centered at pt
          var color
          var radius = 15
          if(node.data.entry) {
        	color = "orange"
          } else {
        	color = ((node.data.classloader === "Application") ? "#9CCB19" : "#FF8C69")
          }

          ctx.beginPath()
          ctx.arc(pt.x, pt.y, radius, 0, 2 * Math.PI, false)
          ctx.fillStyle = color
          ctx.fill()
          ctx.lineWidth = 1
          ctx.strokeStyle = '#003300'
          ctx.fillText(node.data.outerLabel, pt.x+15, pt.y+15)
          if(node.data.innerLabel !== '') {
          	ctx.fillStyle = "#003300"
          	ctx.fillText(node.data.innerLabel, pt.x-3, pt.y+4)
          }
          ctx.stroke()
          
          if(node.data.expandable === true && node.data.expanded === false) {
          	var innerRadius = 12
          	ctx.beginPath()
          	ctx.arc(pt.x, pt.y, innerRadius, 0, 2 * Math.PI, false)
          	//ctx.fillStyle = color
          	//ctx.fill()
          	ctx.lineWidth = 1
            ctx.strokeStyle = '#003300'
            ctx.stroke()
          }
        })    			
      },
      
      initMouseHandling:function(){
        // no-nonsense drag and drop (thanks springy.js)
        var dragged = null;

        // set up a handler object that will initially listen for mousedowns then
        // for moves and mouseups while dragging
        
        var handler = {
          mousedown:function(e){
            var pos = $(canvas).offset();
            _mouseP = arbor.Point(e.pageX-pos.left, e.pageY-pos.top)
            dragged = particleSystem.nearest(_mouseP);

            if (dragged && dragged.node !== null){
              // while we're dragging, don't let physics move the node
              dragged.node.fixed = true
            }
            
            $(canvas).bind('mouseup', handler.quickClick)
            $(canvas).bind('mousemove', handler.mousemove)
    
            return false
          },
          mousemove:function(e){
            var pos = $(canvas).offset();
            var s = arbor.Point(e.pageX-pos.left, e.pageY-pos.top)

            if (dragged && dragged.node !== null){
              var p = particleSystem.fromScreen(s)
              dragged.node.p = p
            }
            
            $(window).bind('mouseup', handler.mouseup)
            $(canvas).unbind('mouseup', handler.quickClick)
            
            return false
          },
          mouseup:function(e){
            if (dragged===null || dragged.node===undefined) return
            if (dragged.node !== null) dragged.node.fixed = false
            dragged.node.tempMass = 1000
            dragged = null
            
            $(canvas).unbind('mousemove', handler.mousemove)
            $(window).unbind('mouseup', handler.mouseup)
            
            _mouseP = null
            return false
          },
          quickClick:function(e){
            var pos = $(this).offset();
            var p = {x:e.pageX-pos.left, y:e.pageY-pos.top}
            selected = nearest = dragged = particleSystem.nearest(p);
            
            if (selected.node !== null){
            	if(selected.node.data.expanded !== true) {
            		var id = selected.node.name //180
 					var node = _this.nodes[id]
 					var successors = node.successors
 					for(var i = 0; i < successors.length; i++) {
 						var nodeSucc = _this.nodes[_this.nodes[id].successors[i]]
 						var nodeSuccId = nodeSucc.id
 						var nodeSuccOuterLabel = nodeSucc.outerLabel
 						var nodeSuccInnerLabel = nodeSucc.innerLabel
 						var nodeSuccEntry = nodeSucc.entry
 						var nodeSuccClassLoader = nodeSucc.classloader
 						var nodeSuccExpandable = (nodeSucc.successors.length > 0 ? true : false)
 						var edgeLength = Math.floor((Math.random()*15)+5);

 						// add node to particle sys
 						_this.sys.addNode(nodeSuccId, {mass:1.0, outerLabel:nodeSuccOuterLabel, innerLabel:nodeSuccInnerLabel, entry:nodeSuccEntry, classloader:nodeSuccClassLoader, expanded:false, expandable:nodeSuccExpandable})
 						_this.sys.addEdge(id, nodeSuccId, {length:edgeLength, pointSize:3})
 						
 						// mark node as expanded
 						selected.node.data.expanded = true
            		}
 				} else {
 					// recursively remove successor nodes and edges
 					// Todo :)
 				}	
            }
            
            $(canvas).unbind('mousemove', handler.mousemove)
            $(window).unbind('mouseup', handler.mouseup)
            
            return false;
          }
        }
 
        // start listening
        $(canvas).mousedown(handler.mousedown);
      }
    }
    return that
  }    

  $(document).ready(function(){
    var sys = arbor.ParticleSystem(
    	{
    		repulsion:10, // the force repelling nodes from each other 
    		stiffness:600,  // the rigidity of the edges
    		friction:0.5, // the amount of damping in the system
    		gravity:false, // an additional force attracting nodes to the origin
    		fps:30, // frames per second
    		dt:0.02, // timestep to use for stepping the simulation
    		precision:0.6 //  accuracy vs. speed in force calculations
    	})
    	
    sys.renderer = Renderer("#viewport") // our newly created renderer will have its .init() method called shortly by sys...
	_this.sys = sys

	/* Adding nodes to global array */
	$nodes

	/* Adding entry nodes to graph */
	$graph
})

})(this.jQuery)